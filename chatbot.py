from datetime import datetime
from json import load, dump, JSONDecodeError
from os import path
from requests import post, exceptions


class Chatbot:
    """
    A chatbot class that interacts with the OpenAI Chat API.

    Attributes:
        _api_key (str): The API key for accessing the OpenAI Chat API.
        messages (list): List of chat messages in the conversation.

    Methods:
        add_user_message(content): Adds a user message to the chat conversation.
        add_assistant_message(content): Adds an assistant message to the chat conversation.
        _get_chatbot_reply(): Sends the chat conversation to the OpenAI Chat API and retrieves the bot's reply.
        get_reply(user_input): Generates a reply from the chatbot based on user input.
        save_to_file(): Saves the chat conversation to a JSON file.
        generate_timestamp(): Generates a timestamp in the desired format.
        update_json_file(file_path, new_data): Updates a JSON file with new data.
        generate_filename_with_utc_date(file_name, extension): Generates a filename with a UTC date and extension.
    """

    def __init__(self, api_key):
        """
        Initializes a Chatbot instance with the provided API key.

        Args:
            api_key (str): The API key for accessing the OpenAI Chat API.
        """

        self._api_key = api_key
        self.messages = [{"role": "system", "content": "You are a helpful assistant."}]

    def add_user_message(self, content):
        """
        Adds a user message to the chat conversation.

        Args:
            content (str): The content of the user message.
        """

        self.messages.append({"role": "user", "content": content})

    def add_assistant_message(self, content):
        """
        Adds an assistant message to the chat conversation.

        Args:
            content (str): The content of the assistant message.
        """

        self.messages.append({"role": "assistant", "content": content})

    def _get_chatbot_reply(self):
        """
        Sends the chat conversation to the OpenAI Chat API and retrieves the bot's reply.

        Returns:
            str: The reply generated by the chatbot.

        Raises:
            Exception: If an error occurs during the API request or while retrieving the reply.
        """

        try:
            response = post(
                "https://api.openai.com/v1/chat/completions",
                headers={
                    "Authorization": f"Bearer {self._api_key}",
                    "Content-Type": "application/json",
                },
                json={
                    "messages": self.messages,
                    "model": "gpt-3.5-turbo",
                },
            )
            response.raise_for_status()
            data = response.json()
            return data["choices"][0]["message"]["content"]
        except exceptions.RequestException as e:
            raise Exception(f"An error occurred during the API request: {str(e)}")
        except (KeyError, IndexError) as e:
            raise Exception(f"Failed to get chatbot's reply from response: {str(e)}")

    def get_reply(self, user_input):
        """
        Generates a reply from the chatbot based on user input.

        Args:
            user_input (str): The user's input message.

        Returns:
            str: The reply generated by the chatbot.
        """

        self.add_user_message(user_input)
        reply = self._get_chatbot_reply()
        if reply:
            self.add_assistant_message(reply)
        return reply

    def save_to_file(self):
        """
        Saves the chat conversation to a JSON file.

        Raises:
            Exception: If an error occurs while updating the JSON file.
        """

        chat_data = {"ts": self.generate_timestamp(), "messages": self.messages}
        file_path = self.generate_filename_with_utc_date("conversation_history", "json")
        self.update_json_file(file_path, chat_data)

    @staticmethod
    def generate_timestamp():
        """
        Generates a timestamp in the desired format.

        Returns:
            str: The generated timestamp.
        """

        current_time = datetime.now()
        return current_time.strftime("%Y-%m-%d %H:%M:%S")

    @staticmethod
    def update_json_file(file_path, new_data):
        """
        Updates a JSON file with new data.

        Args:
            file_path (str): The file path of the JSON file.
            new_data (dict): The new data to be appended to the JSON file.

        Raises:
            Exception: If an error occurs while updating the JSON file.
        """

        try:
            if path.exists(file_path):
                with open(file_path, "r") as file:
                    existing_data = load(file)
            else:
                existing_data = []

            existing_data.append(new_data)

            with open(file_path, "w") as file:
                dump(existing_data, file, indent=4)

        except JSONDecodeError:
            raise Exception("Invalid JSON file!")
        except Exception as e:
            raise Exception(f"An error occurred while updating the JSON file: {str(e)}")

    @staticmethod
    def generate_filename_with_utc_date(file_name, extension):
        """
        Generates a filename with a UTC date and extension.

        Args:
            file_name (str): The base name of the file.
            extension (str): The extension to append to the filename.

        Returns:
            str: The generated filename in the format "{file_name}_{formatted_date}.{extension}".

        Raises:
            ValueError: If either `file_name` or `extension` is an empty string.
        """

        if not file_name or not extension:
            raise ValueError("Both file_name and extension must be non-empty strings.")

        current_date = datetime.utcnow()
        formatted_date = current_date.strftime("%Y%m%d")
        new_filename = f"{file_name}_{formatted_date}.{extension}"
        return new_filename
